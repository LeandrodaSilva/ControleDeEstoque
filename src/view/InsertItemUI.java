/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.io.FileNotFoundException;
import model.businessObject.RandomValue;
import java.io.IOException;
import model.dataAcessObject.DirDAO;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.dataAcessObject.ItemDAO;
import model.dataAcessObject.SettingsDAO;
import model.valueObject.Item;
import model.interfaces.Operations;

/**
 *
 * @author ld_si
 */
public class InsertItemUI extends javax.swing.JFrame implements Operations {

    /**
     * Creates new form InsertUI
     */
    public MainUI mainUI;
    public Item item;
    private static ArrayList<Item> itens;
    public String option;

    public InsertItemUI() {
        this.item = new Item();
        initComponents();
    }

    /**
     * @param mainUI Formulario de origem
     * @param option Opção: "new" para inserção, "edit" para edição
     * @author Leandro da Silva
     */
    public InsertItemUI(MainUI mainUI, String option) {
        this.mainUI = mainUI;
        this.option = option;
        this.item = new Item();
        initComponents();
    }

    /**
     *
     * @param mainUI
     * @param option
     * @param itens
     * @param i
     */
    public InsertItemUI(MainUI mainUI, String option, ArrayList itens, int i) {
        this.mainUI = mainUI;
        this.option = option;
        this.item = (Item) itens.get(i);
        InsertItemUI.itens = itens;
        initComponents();
        jButtonDelete.setVisible(true);
        setFrameElements();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelQuantity = new javax.swing.JLabel();
        jLabelName = new javax.swing.JLabel();
        jLabelPrice = new javax.swing.JLabel();
        jLabelDescription = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaDescription = new javax.swing.JTextArea();
        jTextFieldPrice = new javax.swing.JTextField();
        jTextFieldName = new javax.swing.JTextField();
        jTextFieldQuantity = new javax.swing.JTextField();
        jButtonSave = new javax.swing.JButton();
        jButtonClear = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Adicionar produto");
        setType(java.awt.Window.Type.UTILITY);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(null);

        jLabelQuantity.setText("Quantidade");
        getContentPane().add(jLabelQuantity);
        jLabelQuantity.setBounds(37, 64, 65, 16);

        jLabelName.setText("Nome");
        getContentPane().add(jLabelName);
        jLabelName.setBounds(37, 106, 33, 16);

        jLabelPrice.setText("Preço R$");
        getContentPane().add(jLabelPrice);
        jLabelPrice.setBounds(272, 64, 52, 16);

        jLabelDescription.setText("Descrição");
        getContentPane().add(jLabelDescription);
        jLabelDescription.setBounds(37, 144, 58, 16);

        jTextAreaDescription.setColumns(20);
        jTextAreaDescription.setRows(5);
        jScrollPane1.setViewportView(jTextAreaDescription);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(37, 166, 514, 148);

        jTextFieldPrice.setText("0.00");
        getContentPane().add(jTextFieldPrice);
        jTextFieldPrice.setBounds(342, 60, 209, 24);
        getContentPane().add(jTextFieldName);
        jTextFieldName.setBounds(120, 102, 431, 24);

        jTextFieldQuantity.setText("0");
        getContentPane().add(jTextFieldQuantity);
        jTextFieldQuantity.setBounds(120, 60, 134, 24);

        jButtonSave.setText("Salvar");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonSave);
        jButtonSave.setBounds(485, 332, 66, 32);

        jButtonClear.setText("Limpar");
        jButtonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonClear);
        jButtonClear.setBounds(37, 332, 70, 32);

        jButtonDelete.setText("Deletar");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonDelete);
        jButtonDelete.setBounds(125, 332, 71, 32);
        jButtonDelete.setVisible(false);

        getAccessibleContext().setAccessibleParent(this);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        save();
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jButtonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearActionPerformed
        removeFrameElements();
    }//GEN-LAST:event_jButtonClearActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        mainUI.setEnabled(true);
    }//GEN-LAST:event_formWindowClosing

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        delete();
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InsertItemUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InsertItemUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InsertItemUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InsertItemUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InsertItemUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonClear;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JLabel jLabelDescription;
    private javax.swing.JLabel jLabelName;
    private javax.swing.JLabel jLabelPrice;
    private javax.swing.JLabel jLabelQuantity;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaDescription;
    private javax.swing.JTextField jTextFieldName;
    private javax.swing.JTextField jTextFieldPrice;
    private javax.swing.JTextField jTextFieldQuantity;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setFrameElements() {
        jTextFieldQuantity.setText(Integer.toString(item.getItemQuantity()));
        jTextFieldPrice.setText(Double.toString(item.getItemPrice()));
        jTextAreaDescription.setText(item.getItemDescription());
        jTextFieldName.setText(item.getItemName());
    }

    @Override
    public void delete() {
        if (JOptionPane.showConfirmDialog(rootPane,
                "Deseja realmente excluir?", "Confirmação",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.NO_OPTION) {
            return;
        }
        try {
            getFrameElements();

            int index = 0;
            for (int i = 0; i < itens.size(); i++) {
                if (itens.get(i).getItemCode() == item.getItemCode()) {
                    index = i;
                    itens.remove(index);
                    break;
                }
            }

            if (itens.isEmpty()) {
                switch (SettingsDAO.readSettings().getMode()) {
                    case 0:
                        DirDAO.delete(DirDAO.dir.getDirItem());
                        break;
                    case 1:
                        DirDAO.delete(DirDAO.dir.getDirItemBinary());
                        break;
                }

                DefaultTableModel dtm = (DefaultTableModel) mainUI.jTable.getModel();
                dtm.removeRow(index);
            } else {
                switch (SettingsDAO.readSettings().getMode()) {
                    case 0:
                        DirDAO.delete(DirDAO.dir.getDirItem());
                        for (int i = 0; i < itens.size(); i++) {
                            ItemDAO.writeItem(itens.get(i));
                        }
                        break;
                    case 1:
                        DirDAO.delete(DirDAO.dir.getDirItemBinary());
                        ItemDAO.writeItem(itens);
                        break;
                }

                mainUI.reloadTableItem();
            }

            mainUI.setEnabled(true);
            JOptionPane.showMessageDialog(rootPane, "Item deletado com sucesso!", "Informação", JOptionPane.INFORMATION_MESSAGE);
            this.dispose();
        } catch (IOException ex) {
            System.out.println("Erro na remoção");
            JOptionPane.showMessageDialog(rootPane, ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    @Override
    public void save() {
        
        if (!verifyFrameElements()) {
            System.out.println("Erro - Campos incompletos");
            return;
        }
        try {
            ArrayList<Item> itens = ItemDAO.readItem();
            getFrameElements();

            if (option.equals("edit")) {
                edit();
                return;
            }

            setDataCode();

            switch (SettingsDAO.readSettings().getMode()) {
                case 0:
                    ItemDAO.writeItem(item);
                    break;
                case 1:
                    if (itens == null) {
                        itens = new ArrayList<Item>();
                    }
                    itens.add(item);
                    ItemDAO.writeItem(itens);
                    break;
                case 2:
                    ItemDAO.writeItem(item);
                    break;
            }

            switch (SettingsDAO.readSettings().getMode()) {
                case 0:
                    if (DirDAO.exist(DirDAO.dir.getDirItem())) {
                        mainUI.populaTabelaItem(item);
                    } else {
                        mainUI.reloadTableItem();
                    }
                    break;
                default:
                    if (DirDAO.exist(DirDAO.dir.getDirItemBinary())) {
                        mainUI.populaTabelaItem(item);
                    } else {
                        mainUI.reloadTableItem();
                    }
                    break;
            }

            mainUI.setEnabled(true);

            JOptionPane.showMessageDialog(rootPane, "Item cadastrado com sucesso!", "Informação", JOptionPane.INFORMATION_MESSAGE);

            this.dispose();
        } catch (IOException ex) {
            System.out.println("Erro na inserção");
            JOptionPane.showMessageDialog(rootPane, ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void setDataCode() {
        RandomValue rv = new RandomValue();
        item.setItemCode(rv.getRandomCode());
    }

    @Override
    public void getFrameElements() {
        item.setItemQuantity(Integer.parseInt(jTextFieldQuantity.getText()));
        item.setItemName(jTextFieldName.getText());
        item.setItemDescription(jTextAreaDescription.getText());
        item.setItemPrice(Double.parseDouble(jTextFieldPrice.getText()));
    }

    @Override
    public boolean verifyFrameElements() {
        try {
            Integer.parseInt(jTextFieldQuantity.getText());
            jTextFieldQuantity.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Somente números na quantidade", "Alerta", JOptionPane.WARNING_MESSAGE);
            jTextFieldQuantity.setText("");
            jTextFieldQuantity.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));
            return false;
        }
        try {
            Double.parseDouble(jTextFieldPrice.getText());
            jTextFieldPrice.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Somente números de ponto flutuante no preço", "Alerta", JOptionPane.WARNING_MESSAGE);
            jTextFieldPrice.setText("");
            jTextFieldPrice.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));
            return false;
        }
        return true;
    }

    @Override
    public void removeFrameElements() {
        jTextFieldPrice.setText("");
        jTextFieldQuantity.setText("");
        jTextFieldName.setText("");
        jTextAreaDescription.setText("");
    }

    public void edit() {
        try {
            int index = 0;
            for (int i = 0; i < itens.size(); i++) {
                if (itens.get(i).getItemCode() == item.getItemCode()) {
                    index = i;
                    itens.set(index, item);
                    break;
                }
            }
            switch (SettingsDAO.readSettings().getMode()) {
                case 0:
                    DirDAO.delete(DirDAO.dir.getDirItem());
                    for (int i = 0; i < itens.size(); i++) {
                        ItemDAO.writeItem(itens.get(i));
                    }
                    break;
                default:
                    DirDAO.delete(DirDAO.dir.getDirItemBinary());
                    ItemDAO.writeItem(itens);
            }
            mainUI.reloadTableItem();
            mainUI.setEnabled(true);

            JOptionPane.showMessageDialog(rootPane, "Item cadastrado com sucesso!", "Informação", JOptionPane.INFORMATION_MESSAGE);

            this.dispose();

        } catch (FileNotFoundException ex) {
            System.out.println("edit - Erro: "+ex.getMessage());
        } catch (IOException ex) {
            System.out.println("edit - Erro: "+ex.getMessage());
        }

    }

   

}
